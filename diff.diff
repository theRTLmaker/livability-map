diff --git a/src/app/globals.css b/src/app/globals.css
index 603c93f..df5ac91 100644
--- a/src/app/globals.css
+++ b/src/app/globals.css
@@ -23,6 +23,10 @@
   }
 }
 
+@layer utilities {
+  .backdrop-blur-sm { backdrop‚Äêfilter: blur(4px); }
+}
+
 body {
   background: var(--background);
   color: var(--foreground);
diff --git a/src/app/layout.tsx b/src/app/layout.tsx
index c3c6783..9ad23e3 100644
--- a/src/app/layout.tsx
+++ b/src/app/layout.tsx
@@ -14,22 +14,22 @@ const geistMono = Geist_Mono({
 });
 
 export const metadata: Metadata = {
-  title: "Create Next App",
-  description: "Generated by create next app",
+  title: 'Livability Map',
+  description: "Where to live in London? A map of livability scores based on tube stops, supermarkets, and shops.",
 };
 
-export default function RootLayout({
-  children,
-}: Readonly<{
-  children: React.ReactNode;
-}>) {
+
+export default function RootLayout({ children }: { children: React.ReactNode }) {
   return (
     <html lang="en">
-      <body
-        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
-      >
-        {children}
+      <body className="flex flex-col h-screen bg-gray-100">
+        <header className="bg-white shadow-md py-4 px-6 text-2xl font-semibold text-gray-800">
+          Livability Map
+        </header>
+        <main className="flex-1 overflow-hidden">
+          {children}
+        </main>
       </body>
     </html>
-  );
+  )
 }
diff --git a/src/app/page.tsx b/src/app/page.tsx
index 9df328b..1a27f86 100644
--- a/src/app/page.tsx
+++ b/src/app/page.tsx
@@ -1,14 +1,23 @@
 'use client'
-import Map from '../components/Map'
+import React from 'react'
+import dynamic from 'next/dynamic'
 import SliderPanel from '../components/SliderPanel'
 
+// Lazy-load the Map component so it never runs on the server
+const Map = dynamic(() => import('../components/Map'), {
+  ssr: false
+})
+
 export default function Home() {
   return (
-    <div className="flex h-screen">
-      <div className="flex-1 relative">
+    <div className="flex h-full">
+      {/* Map container as a card */}
+      <div className="flex-1 m-4 rounded-xl overflow-hidden shadow-lg ring-1 ring-gray-200">
         <Map />
       </div>
-      <div className="flex-none">
+
+      {/* Slider panel as a translucent card */}
+      <div className="w-80 m-4">
         <SliderPanel />
       </div>
     </div>
diff --git a/src/components/Map.tsx b/src/components/Map.tsx
index 9e1d8e1..baa3a07 100644
--- a/src/components/Map.tsx
+++ b/src/components/Map.tsx
@@ -1,6 +1,4 @@
-// src/components/Map.tsx
 'use client'
-
 import React, { useEffect, useState } from 'react'
 import {
   MapContainer,
diff --git a/src/components/SliderPanel.tsx b/src/components/SliderPanel.tsx
index e2a267f..b5218fd 100644
--- a/src/components/SliderPanel.tsx
+++ b/src/components/SliderPanel.tsx
@@ -1,36 +1,50 @@
 'use client'
-import { useState } from 'react'
-import { Listbox } from '@headlessui/react'
+import React, { useState } from 'react'
 import { Range } from 'react-range'
 
 export default function SliderPanel() {
   const categories = ['Tube', 'Supermarkets', 'Shops'] as const
-  const [weights, setWeights] = useState([50, 50, 50])  // init equal
+  const [weights, setWeights] = useState([50, 50, 50])
 
   return (
-    <aside className="w-64 bg-white p-4 space-y-6 shadow-lg">
-      <h2 className="text-lg font-bold">Preferences</h2>
+    <aside className="bg-white/75 backdrop-blur-sm rounded-xl p-6 shadow-xl ring-1 ring-gray-200 space-y-8">
+      <h2 className="text-2xl font-semibold text-gray-800">Preferences</h2>
+
       {categories.map((cat, i) => (
-        <div key={cat}>
-          <label className="block mb-1 font-medium">{cat}</label>
+        <div key={cat} className="space-y-2">
+          <div className="flex justify-between items-center">
+            <span className="font-medium text-gray-700">{cat}</span>
+            <span className="text-sm text-gray-600">{weights[i]}%</span>
+          </div>
           <Range
             step={1}
             min={0}
             max={100}
             values={[weights[i]]}
-            onChange={vals => {
-              const w = [...weights]; w[i] = vals[0]; setWeights(w)
+            onChange={(vals) => {
+              const w = [...weights]
+              w[i] = vals[0]
+              setWeights(w)
             }}
             renderTrack={({ props, children }) => (
-              <div {...props} className="h-1 bg-gray-200 rounded">
+              <div
+                {...props}
+                className="h-1 w-full bg-gray-200 rounded-md hover:bg-gray-300 transition"
+              >
                 {children}
               </div>
             )}
-            renderThumb={({ props }) => (
-              <div {...props} className="h-4 w-4 bg-blue-500 rounded-full" />
-            )}
+            renderThumb={({ props: thumbProps }) => {
+              const { key, ...rest } = thumbProps
+              return (
+                <div
+                  {...rest}
+                  key={key}
+                  className="h-5 w-5 bg-blue-600 rounded-full shadow-md hover:scale-110 transition-transform"
+                />
+              )
+            }}
           />
-          <div className="text-sm mt-1">{weights[i]}%</div>
         </div>
       ))}
     </aside>
